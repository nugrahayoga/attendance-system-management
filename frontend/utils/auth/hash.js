'use strict'
;(function (_0x3c8f89, _0x324f6e) {
	const _0x3838eb = _0xbb71,
		_0x4ec1e6 = _0x3c8f89()
	while (!![]) {
		try {
			const _0x2a22a9 =
				(parseInt(_0x3838eb(0x1c6)) / 0x1) *
					(parseInt(_0x3838eb(0x1b2)) / 0x2) +
				(parseInt(_0x3838eb(0x1b7)) / 0x3) *
					(-parseInt(_0x3838eb(0x1c8)) / 0x4) +
				(-parseInt(_0x3838eb(0x1c2)) / 0x5) *
					(parseInt(_0x3838eb(0x1bc)) / 0x6) +
				(-parseInt(_0x3838eb(0x1c3)) / 0x7) *
					(parseInt(_0x3838eb(0x1c5)) / 0x8) +
				-parseInt(_0x3838eb(0x1be)) / 0x9 +
				-parseInt(_0x3838eb(0x1ca)) / 0xa +
				parseInt(_0x3838eb(0x1cb)) / 0xb
			if (_0x2a22a9 === _0x324f6e) break
			else _0x4ec1e6['push'](_0x4ec1e6['shift']())
		} catch (_0x213b49) {
			_0x4ec1e6['push'](_0x4ec1e6['shift']())
		}
	}
})(_0x197b, 0x37efe)
function _0x197b() {
	const _0x508a0b = [
		'aes-256-cbc',
		'1219923yCZcaO',
		'final',
		'update',
		'randomBytes',
		'2028785HrMIof',
		'329vLRQTj',
		'RLJG',
		'11896vNsHGI',
		'8DUyBbl',
		'createDecipheriv',
		'54168jvfRCs',
		'slice',
		'1628820XokvWb',
		'7232621TVsSoT',
		'h86z',
		'from',
		'Es54',
		'89806aRASJG',
		'5x72',
		'utf8',
		'juRq',
		'toString',
		'3dOFmCc',
		'e5MZ',
		'createCipheriv',
		'hex',
		'6Unf',
		'6EuTHnU',
	]
	_0x197b = function () {
		return _0x508a0b
	}
	return _0x197b()
}
function _0xbb71(_0x4378a6, _0x1ca5ed) {
	const _0x197bb8 = _0x197b()
	return (
		(_0xbb71 = function (_0xbb718c, _0x26f48b) {
			_0xbb718c = _0xbb718c - 0x1b0
			let _0x1aa745 = _0x197bb8[_0xbb718c]
			return _0x1aa745
		}),
		_0xbb71(_0x4378a6, _0x1ca5ed)
	)
}
const crypto = require('crypto')
class Hash {
	['encrypt'](_0x574551) {
		const _0x195570 = _0xbb71
		try {
			const _0x46dd3b = _0x195570(0x1b5),
				_0x182660 = _0x195570(0x1b3),
				_0x4a73f6 = _0x195570(0x1b1),
				_0x97ff0b = _0x195570(0x1c4),
				_0x58750b = 'DJ',
				_0x170372 = _0x195570(0x1b8),
				_0x23783b = '6Unf',
				_0x5c1d90 = _0x195570(0x1cc),
				_0x3b5b9b = 'lE',
				_0x5d70f3 =
					_0x46dd3b +
					_0x182660 +
					_0x4a73f6 +
					_0x97ff0b +
					_0x58750b +
					_0x170372 +
					_0x23783b +
					_0x5c1d90 +
					_0x3b5b9b,
				_0x59f8c6 = crypto[_0x195570(0x1c1)](0x10),
				_0x96f02 = crypto[_0x195570(0x1b9)](
					_0x195570(0x1bd),
					_0x5d70f3,
					_0x59f8c6
				)
			let _0x4d8ddd = _0x96f02['update'](
				_0x574551[_0x195570(0x1b6)](),
				'utf8',
				_0x195570(0x1ba)
			)
			return (
				(_0x4d8ddd += _0x96f02[_0x195570(0x1bf)](_0x195570(0x1ba))),
				(_0x4d8ddd =
					_0x59f8c6[_0x195570(0x1b6)](_0x195570(0x1ba)) + _0x4d8ddd),
				_0x4d8ddd
			)
		} catch (_0x36c055) {
			return ''
		}
	}
	['decrypt'](_0x29316c) {
		const _0x368761 = _0xbb71
		try {
			const _0x135c68 = _0x368761(0x1b5),
				_0xde3001 = '5x72',
				_0x4c6734 = 'Es54',
				_0xa57be2 = _0x368761(0x1c4),
				_0x24dfc9 = 'DJ',
				_0x2e7624 = 'e5MZ',
				_0x4c4fd9 = _0x368761(0x1bb),
				_0x335ec3 = _0x368761(0x1cc),
				_0x49428b = 'lE',
				_0x18e6e9 =
					_0x135c68 +
					_0xde3001 +
					_0x4c6734 +
					_0xa57be2 +
					_0x24dfc9 +
					_0x2e7624 +
					_0x4c4fd9 +
					_0x335ec3 +
					_0x49428b,
				_0x54d057 = Buffer[_0x368761(0x1b0)](
					_0x29316c,
					_0x368761(0x1ba)
				),
				_0x44b0ee = _0x54d057[_0x368761(0x1c9)](0x0, 0x10),
				_0xc2a21a = _0x54d057[_0x368761(0x1c9)](0x10),
				_0x371e88 = crypto[_0x368761(0x1c7)](
					_0x368761(0x1bd),
					_0x18e6e9,
					_0x44b0ee
				)
			let _0x48b03d = _0x371e88[_0x368761(0x1c0)](
				_0xc2a21a,
				'hex',
				_0x368761(0x1b4)
			)
			return (
				(_0x48b03d += _0x371e88[_0x368761(0x1bf)](_0x368761(0x1b4))),
				_0x48b03d
			)
		} catch (_0xeff040) {
			return ''
		}
	}
}
module.exports = new Hash()
